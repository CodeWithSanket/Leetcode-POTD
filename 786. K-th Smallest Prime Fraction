Approach-1: Brute Force: Finding All Pairs of Fractions
Approach-2: Using MaxHeap, Store in max Heap {fraction,arr[i],arr[j]} until maxHeap.size() <= k and if maxHeap.size() > k
            then pop from MaxHeap. Now again size becomes k, now push the current processing element. Coming out of inner loop just maintain a check if maxHeap.size() > k => then pop from Heap


class Solution {
public:
    //  Approach-1: Using Brute force. T.C -> O(N^2) and S.C -> O(N)

    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        vector<int>answer(2);
        vector<pair<int,int>>tempArr;
        map<double,pair<int,int>>mpp;

        int n = arr.size();
        
        for(int i = 0; i < n-1; i++) {
            for(int j = i+1; j < n; j++) {
                int first = arr[i];
                int second = arr[j];
                double fraction = double(first)/double(second);
                mpp[fraction] = make_pair(first,second);
            }
        }
        int cnt = 0;
        pair<int,int>p;
        double key;
        for(auto it: mpp) {
            if(cnt < k) {
                double key = double(it.first);
                p = it.second;
            }
            cnt++;
        } 
        answer[0] = p.first;
        answer[1] = p.second;
        return answer;
    }
};

Approach-2: Using MaxHeap

Time Complexity: O(n^2logn)
Space Complexity: O(K)

class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        vector<int>answer(2);

        priority_queue<pair<double,pair<int,int>>>maxHeap;
        
        for(int i = 0; i < arr.size()-1; i++) {
            for(int j = i+1; j < arr.size(); j++) {
                double fraction = double(arr[i])/double(arr[j]);
                if(maxHeap.size() <= k) {
                    maxHeap.push(make_pair(fraction,make_pair(arr[i],arr[j])));
                }
                else {
                    maxHeap.pop();
                    maxHeap.push(make_pair(fraction,make_pair(arr[i],arr[j])));
                }
            }
            if(maxHeap.size() > k) {
                maxHeap.pop();
            }
        }
        auto temp = maxHeap.top();
        answer[0] = temp.second.first;
        answer[1] = temp.second.second;
        return answer;
    }
};


Approach-3: Using MinHeap

class Solution {
public:
    
    // Approach-3: Using MinHeap. We are trying to keep the fraction to be smallest for that our denominator should be kept maximum and numerator should be kept minimum. 
    // i = 0, j = n-1;
    // So once obtained the 1st smallest then try to push in Min Heap {fraction,arr[i],arr[j-1]};

    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        vector<int>answer(2);
        int n = arr.size();

        priority_queue<pair<double,pair<int,int>>,vector<pair<double,pair<int,int>>>,greater<pair<double,pair<int,int>>>>minHeap;

        for(int i = 0; i < n-1; i++) {
            minHeap.push(make_pair(1.0*arr[i]/arr[n-1],make_pair(i,n-1)));
        }    

        int smallest = 1;
        while(smallest < k) {
            auto topPair = minHeap.top();
            minHeap.pop();

            int i = topPair.second.first;
            int j = topPair.second.second;

            j--;
            
            // Wahan mai fasunga
            minHeap.push(make_pair(1.0*arr[i]/arr[j],make_pair(i,j)));
            smallest++;
        }
        auto topPair = minHeap.top();
        minHeap.pop();
        return {arr[topPair.second.first], arr[topPair.second.second]};
    }
};
